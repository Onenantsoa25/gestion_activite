<style>
  :root {
    --sidebar-expanded-width: 280px;
    --sidebar-collapsed-width: 70px;
  }

  body {
    margin: 0;
    padding: 0;
  }

  /* Sidebar */
  #sidebarMenu {
    position: fixed;
    top: 0;
    left: 0;
    width: var(--sidebar-expanded-width);
    height: 100vh;
    /* background: linear-gradient(to bottom, #ffffffdc, #c8dbebff); */
    background: #cdd2d687 53%;

    padding: 1rem;
    box-sizing: border-box;
    transition: width 0.3s ease;
    overflow: hidden;
    z-index: 10500;
  }

  #sidebarMenu.collapsed {
    width: var(--sidebar-collapsed-width);
    padding: 1rem 0.3rem;
  }

  #sidebarMenu.collapsed .nav-link span,
  #sidebarMenu.collapsed .fs-4,
  #sidebarMenu.collapsed hr {
    display: none;
  }

  #sidebarMenu.collapsed .nav-link i {
    margin-right: 0;
    font-size: 1.2em;
  }

  #sidebarMenu .nav-link {
    white-space: nowrap;
    overflow: hidden;
  }

  main {
    margin-left: var(--sidebar-expanded-width);
    padding: 1rem;
    transition: margin-left 0.3s ease;
  }

  #sidebarMenu.collapsed + main {
    margin-left: var(--sidebar-collapsed-width);
  }

  /* Bouton hamburger (mobile) */
  #toggleSidebarBtn {
    display: none;
    flex-direction: column;
    justify-content: space-between;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 5px;
    padding: 5px;
    cursor: pointer;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    width: 35px;
    height: 30px;
    margin-bottom: 1rem;
    align-self: flex-end;
  }

  #toggleSidebarBtn span {
    display: block;
    height: 4px;
    background-color: #000;
    border-radius: 2px;
  }

  /* Responsive mobile */
  @media (max-width: 768px) {
    #toggleSidebarBtn {
      display: none;
    }

    #sidebarMenu {
      width: 100%;
      height: auto;
      position: relative;
    }

    #sidebarMenu.collapsed {
      display: block;
    }

    main {
      margin-left: 0;
    }

    main {
      margin-left: 0;
    }
    html, body {
      overflow-x: hidden;
    }
  }
</style>

<!-- SIDEBAR -->
<nav id="sidebarMenu" class="sidebar d-flex flex-column flex-shrink-0 p-3 vh-100 shadow-sm">

  <!-- BOUTON HAMBURGER - visible uniquement en mobile -->
  <button id="toggleSidebarBtn" aria-label="Afficher/Masquer le menu" type="button">
    <span></span>
    <span></span>
    <span></span>
  </button>

  <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-dark text-decoration-none">
    <span class="fs-4"><i class="bi bi-kanban-fill me-2"></i>Gestion Activités</span>
  </a>

  <hr class="text-secondary">

  <ul class="nav nav-pills flex-column mb-auto">
    <li class="nav-item">
      <a href="/manager/dashboard" class="nav-link {% if active == 'dashboard' %} text-white active {% else %} text-dark {% endif %}">
        <i class="bi bi-house-door me-2"></i> <span>Tableau de bord</span>
      </a>
    </li>
    <li>
      <a href="/manager/activite" class="nav-link {% if active == 'activite' %} text-white active {% else %} text-dark {% endif %}">
        <i class="bi bi-plus-square me-2"></i> <span>Créer des activités</span>
      </a>
    </li>
    <li>
      <a href="/manager/activites" class="nav-link {% if active == 'activites' %} text-white active {% else %} text-dark {% endif %}">
        <i class="bi bi-folder2-open me-2"></i> <span>Les activités</span>
      </a>
    </li>
    <li>
      <a href="/manager/activites/soumises" class="nav-link {% if active == 'soumises' %} text-white active {% else %} text-dark {% endif %}">
        <i class="bi bi-hourglass-split me-2"></i> <span>Activités soumises</span>
      </a>
    </li>
    <li>
      <a href="/manager/charges_travail" class="nav-link {% if active == 'charge' %} text-white active {% else %} text-dark {% endif %}">
        <i class="bi bi-person-lines-fill me-2"></i> <span>Charges de travail</span>
      </a>
    </li>
    <li>
      <a href="/manager/anomalies" class="nav-link {% if active == 'anomalie' %} text-white active {% else %} text-dark {% endif %}">
        <i class="bi bi-exclamation-triangle me-2"></i> <span>Anomalies</span>
        <span id="notifCount" class="badge bg-danger rounded-pill ms-2" style="display:none">0</span>
      </a>
    </li>
  </ul>

  <hr class="text-secondary">

  <div class="dropdown">
    <a href="#" class="d-flex align-items-center text-dark text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
      <img src="https://ui-avatars.com/api/?name=Manager&background=0d6efd&color=fff&size=32" alt="avatar" width="32" height="32" class="rounded-circle me-2">
      {# <strong>Manager</strong> #}
      <strong>{{ app.user.matricule }}</strong>
    </a>
    <ul class="dropdown-menu dropdown-menu-light text-small shadow" aria-labelledby="dropdownUser1">
      {# <li><a class="dropdown-item" href="#"><i class="bi bi-gear me-2"></i> Paramètres</a></li>
      <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i> Profil</a></li> #}
      <li><hr class="dropdown-divider"></li>
      <li><a class="dropdown-item" href="/logout"><i class="bi bi-box-arrow-right me-2"></i> Déconnexion</a></li>
    </ul>
  </div>
</nav>

{# <main>
  <!-- Ton contenu ici -->
</main> #}

<script>
  const toggleBtn = document.getElementById('toggleSidebarBtn');
  const sidebar = document.getElementById('sidebarMenu');

  function adjustSidebarOnResize() {
    if (window.innerWidth > 768) {
      sidebar.classList.remove('collapsed');
      sidebar.classList.remove('active');
    } else {
      sidebar.classList.add('collapsed');
      sidebar.classList.remove('active');
    }
  }

  window.addEventListener('resize', adjustSidebarOnResize);
  window.addEventListener('load', adjustSidebarOnResize);

  toggleBtn.addEventListener('click', () => {
    if (window.innerWidth <= 768) {
      sidebar.classList.toggle('active');
      if (sidebar.classList.contains('active')) {
        sidebar.classList.remove('collapsed');
      } else {
        sidebar.classList.add('collapsed');
      }
    } else {
      sidebar.classList.toggle('collapsed');
    }
  });

  // Fonction pour obtenir la date au format YYYY-MM-DD
  function getTodayDate() {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0'); // mois
    const dd = String(today.getDate()).padStart(2, '0');      // jour
    return `${yyyy}-${mm}-${dd}`;
  }

  const today = getTodayDate();
  const savedDate = localStorage.getItem("todayDate");

  if (savedDate) {
    console.log("Date déjà enregistrée :", savedDate);

    if (savedDate === today) {
      console.log("La date enregistrée correspond à aujourd'hui ✅");
    } else {
      fetch('/api/anomalies/update', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          }
      })
      .then(response => response.json())
      .then(data => {
          console.log("Réponse de l'API :", data);
      })
      .catch(error => {
          console.error("Erreur lors de l'appel à l'API :", error);
      });
      
      console.log("La date enregistrée est différente de celle d'aujourd'hui ❌");
      // mettre à jour avec la nouvelle date
      localStorage.setItem("todayDate", today);
      console.log("Nouvelle date enregistrée :", today);
    }
  } else {
    console.log("Aucune date trouvée dans localStorage, on ajoute la date du jour.");
    localStorage.setItem("todayDate", today);
  }

async function updateNotifCount() {
  try {
    const response = await fetch('/api/anomalies/count', {
      headers: { 'Accept': 'application/json' }
    });
    if (!response.ok) throw new Error('Erreur réseau');

    const data = await response.json();
    const badge = document.getElementById('notifCount');
    const newCount = data.count;

    // Récupérer l'ancien nombre depuis localStorage
    const oldCount = parseInt(localStorage.getItem("anomalyCount") || "0");

    // Comparer l'ancien et le nouveau nombre
    if (newCount > oldCount) {
      if (oldCount !== 0) {
        alert(`Nouvelles anomalies`);//
      }
      // Mettre à jour le localStorage
      localStorage.setItem("anomalyCount", newCount);
    }

    // Mettre à jour l'affichage du badge
    if (newCount > 0) {
      badge.textContent = newCount;
      badge.style.display = 'inline-block';
    } else {
      badge.style.display = 'none';
    }
  } catch (error) {
    console.error('Impossible de récupérer les notifications:', error);
  }
}

// Au chargement de la page
window.addEventListener('load', () => {
  updateNotifCount();
  // Vérifier toutes les 60 secondes
  setInterval(updateNotifCount, 60000);
});


</script>
